@page "/data"  // Définit la route pour cette page
@using Favies.Services  // Importation des services nécessaires
@using Favies.Models  // Importation des modèles nécessaires
@inject GetMoviesService GetMoviesService  // Injection du service pour récupérer les films
@inject FavoritesService FavoritesService  // Injection du service pour gérer les favoris

<h3>Données de l'API</h3>

@if (MovieData == null)  // Vérifie si les données des films sont nulles
{
    <p>Chargement...</p>  // Affiche un message de chargement
}
else
{
    <ul>
        @foreach (var item in MovieData)  // Parcourt chaque film dans MovieData
        {
            <li>
                @item.Title  // Affiche le titre du film
                <button @onclick="() => FavoritesService.AddFavorites(item.Title)">Ajouter aux Favoris</button>  // Appel correct à AddFavorites
                <button @onclick="() => FavoritesService.RemoveFavorites(item.Title)">Supprimer des Favoris</button>  // Appel correct à RemoveFavorites
                <button @onclick="() => StartEditFavorite(item.Title)">Éditer Favori</button>  // Appel à StartEditFavorite
            </li>
        }
    </ul>
}

<h3>Favoris</h3>
@if (FavoritesService.GetFavorites().Count == 0)  // Vérifie si la liste des favoris est vide
{
    <p>Aucun favori ajouté pour le moment.</p>  // Affiche un message si aucun favori n'est présent
}
else
{
    <ul>
        @foreach (var favorite in FavoritesService.GetFavorites())  // Parcourt chaque favori
        {
            <li>
                @favorite  // Affiche le nom du favori
                <button @onclick="() => FavoritesService.RemoveFavorites(favorite)">Remove</button>  // Supprime le favori
                <button @onclick="() => StartEditFavorite(favorite)">Edit</button>  // Édite le favori
            </li>
        }
    </ul>
}

@if (isEditing)  // Vérifie si l'utilisateur est en mode édition
{
    <EditForm Model="@editedFavorite" OnValidSubmit="SaveEditedFavorite">  // Formulaire d'édition
        <DataAnnotationsValidator />  // Validation des données
        <ValidationSummary />  // Résumé des erreurs de validation
        <InputText @bind-Value="editedFavorite" />  // Champ de texte pour éditer le favori
        <button type="submit">Save</button>  // Bouton pour sauvegarder les modifications
        <button type="button" @onclick="CancelEdit">Cancel</button>  // Bouton pour annuler l'édition
    </EditForm>
}
else
{
    <EditForm Model="@newFavorite" OnValidSubmit="AddFavorite">  // Formulaire pour ajouter un nouveau favori
        <DataAnnotationsValidator />  // Validation des données
        <ValidationSummary />  // Résumé des erreurs de validation
        <InputText @bind-Value="newFavorite" />  // Champ de texte pour le nouveau favori
        <button type="submit">Add</button>  // Bouton pour ajouter le favori
    </EditForm>
}

@code {
    private string newFavorite = string.Empty;  // Champ pour le nouveau favori
    private string? editedFavorite;  // Champ pour le favori en cours d'édition (nullable )
    private string? originalFavorite;  // Champ pour le favori original avant édition (nullable)
    private bool isEditing = false;  // Indique si l'utilisateur est en mode édition

    // Méthode pour ajouter un nouveau favori
    private void AddFavorite()
    {
        if (!string.IsNullOrWhiteSpace(newFavorite))  // Vérifie que le champ n'est pas vide
        {
            FavoritesService.AddFavorites(newFavorite);  // Ajoute le favori via le service
            newFavorite = string.Empty;  // Réinitialise le champ
        }
    }

    // Méthode pour supprimer un favori
    private void RemoveFromFavorites(string favorite)
    {
        if (favorite != null)  // Vérifie que le favori n'est pas null
        {
            FavoritesService.RemoveFavorites(favorite);  // Supprime le favori via le service
        }
    }

    // Méthode pour commencer l'édition d'un favori
    private void StartEditFavorite(string favorite)
    {
        if (favorite != null)  // Vérifie que le favori n'est pas null
        {
            originalFavorite = favorite;  // Stocke le favori original
            editedFavorite = favorite;  // Prépare le favori pour l'édition
            isEditing = true;  // Met le mode édition à vrai
        }
    }

    // Méthode pour sauvegarder les modifications d'un favori
    private void SaveEditedFavorite()
    {
        if (originalFavorite != null && editedFavorite != null)  // Vérifie que les valeurs ne sont pas null
        {
            FavoritesService.EditFavorites(originalFavorite, editedFavorite);  // Édite le favori via le service
            isEditing = false;  // Met le mode édition à faux
        }
    }

    // Méthode pour annuler l'édition
    private void CancelEdit()
    {
        isEditing = false;  // Met le mode édition à faux
    }

    public required IEnumerable<Movie> MovieData { get; set; }  // Propriété pour stocker les données des films

    // Méthode pour initialiser les données lors du chargement de la page
    protected override async Task OnInitializedAsync()
    {
        MovieData = await GetMoviesService.GetMoviesAsync("Inception");  // Récupère les films via le service
    }
}