@using Favies.Pages
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Favies</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/manageFavorites">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Manage Favorites
            </NavLink>
        </div>

        @if (!_isLoading)
        {
            @if (!_isAuthenticated)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/login">
                        <span class="bi bi-person-plus-fill-nav-menu" aria-hidden="true"></span> Connection
                    </NavLink>
                </div>
            }
            else
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/" @onclick="Logout">
                        <span class="bi bi-person-dash-fill-nav-menu" aria-hidden="true"></span> Déconnexion
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool _isAuthenticated;
    private bool _isLoading = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthService.AuthenticationChanged += OnAuthenticationChanged;
        await AuthService.GetCurrentUserAsync();
        _isAuthenticated = AuthService.IsAuthenticated();
        _isLoading = false;
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }

    private void OnAuthenticationChanged()
    {
        _isAuthenticated = AuthService.IsAuthenticated();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.AuthenticationChanged -= OnAuthenticationChanged;
        GC.SuppressFinalize(this);
    }
}
