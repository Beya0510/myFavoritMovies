@page "/authentication"
@using Favies.Services
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<h3>Authentification</h3>

@if (currentUser is not null)
{
    <p class="alert alert-success">✅ Vous êtes déjà connecté en tant que <strong>@currentUser.Email</strong>.</p>
    <button @onclick="Logout" class="btn btn-danger">Se déconnecter</button>
}
else
{
    <div class="auth-container">
        <h4>Connexion</h4>
        <EditForm Model="@this" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="email" class="form-control" />
                <ValidationMessage For="@(() => email)" />
            </div>

            <div class="form-group">
                <label>Mot de passe</label>
                <InputText @bind-Value="password" class="form-control" type="password" />
                <ValidationMessage For="@(() => password)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="error-message">@errorMessage</p>
            }

            <button type="submit" class="btn btn-primary">Se connecter</button>
        </EditForm>

        <p>Pas encore de compte ? 
            <button @onclick="GoToRegister" class="btn btn-link">Inscrivez-vous ici</button>
        </p>
    </div>
}

@code {
    private string email = "";
    private string password = "";
    private string? errorMessage;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
    }

    private async Task HandleLogin()
    {
        bool success = await AuthService.LoginAsync(email, password);
        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Identifiants incorrects.";
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/authentication", forceLoad: true);
    }

    private void GoToRegister()
    {
        NavigationManager.NavigateTo("/register"); // Redirige vers la page d'inscription
    }
}
