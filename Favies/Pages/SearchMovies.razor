@page "/datadisplay"  
@using Favies.Services  
@using Favies.Models  
@inject GetMoviesService GetMoviesService  
@inject FavoritesService FavoritesService  

<h3>Données de l'API</h3>

@if (MovieData == null)  // Vérifie si les données des films sont nulles
{
    <p>Chargement...</p>  // Affiche un message de chargement
}
else
{
    <ul>
        @foreach (var item in MovieData)  // Parcourt chaque film dans MovieData
        {
            <li>
                @item.Title  // Affiche le titre du film
                <button @onclick="() => FavoritesService.AddFavorites(item.Title)">Ajouter aux Favoris</button>  
                <button @onclick="() => FavoritesService.RemoveFavorites(item.Title)">Supprimer des Favoris</button>  
            </li>
        }
    </ul>
}

<h3>Ajouter un favori</h3>
<EditForm Model="@newFavorite" OnValidSubmit="AddFavorite">  
    <DataAnnotationsValidator />  
    <ValidationSummary />  
    <InputText @bind-Value="newFavorite" />  
    <button type="submit">Add</button>  
</EditForm>

<h3>Supprimer un favori</h3>
<EditForm Model="@favoriteToRemove" OnValidSubmit="RemoveFavorite">  
    <DataAnnotationsValidator />  
    <ValidationSummary />  
    <InputText @bind-Value="favoriteToRemove" />  
    <button type="submit">Remove</button>  
</EditForm>
<br/>
<u>
    <a href="/favorites">lien vers les favoris</a>
</u>
@code {
    private string newFavorite = string.Empty;  // Champ pour le nouveau favori
    private string favoriteToRemove = string.Empty;  // Champ pour le favori à supprimer

    // Méthode pour ajouter un nouveau favori
    private void AddFavorite()
    {
        if (!string.IsNullOrWhiteSpace(newFavorite))  // Vérifie que le champ n'est pas vide
        {
            FavoritesService.AddFavorites(newFavorite);  // Ajoute le favori via le service
            newFavorite = string.Empty;  // Réinitialise le champ
        }
    }

    // Méthode pour supprimer un favori
    private void RemoveFavorite()
    {
        if (!string.IsNullOrWhiteSpace(favoriteToRemove))  // Vérifie que le champ n'est pas vide
        {
            FavoritesService.RemoveFavorites(favoriteToRemove);  // Supprime le favori via le service
            favoriteToRemove = string.Empty;  // Réinitialise le champ
        }
    }

    public required IEnumerable<Movie> MovieData { get; set; }  // Propriété pour stocker les données des films

    // Méthode pour initialiser les données lors du chargement de la page
    protected override async Task OnInitializedAsync()
    {
        MovieData = await GetMoviesService.GetMoviesAsync("Inception");  // Récupère les films via le service
    }
}