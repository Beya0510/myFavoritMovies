@page "/SearchMoviesPage"
@using Favies.Services
@using Favies.Models
@inject GetMoviesService GetMoviesService
@inject FavoritesService FavoritesService
@inject AuthService AuthService

<h3>🔍 Rechercher un Film</h3>

<!-- Formulaire de recherche -->
<input type="text" @bind="searchQuery" placeholder="Entrez un titre de film..." />
<button @onclick="SearchMovies">Rechercher</button>

@if (isLoading)
{
    <p>Chargement des résultats...</p>
}
else if (MovieData is not null && MovieData.Any())
{
    <div>
        <h4>🎬 Résultats de la recherche</h4>
        <table>
            <thead>
            <tr>
                <th>Titre</th>
                <th>Année</th>
                <th>Favoris</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var movie in MovieData)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.Year</td>
                    <td>
                        @if (currentUser is not null)
                        {
                            @if (!FavoriteMovies.Contains(movie.Title))
                            {
                                <button @onclick="() => AddToFavorites(movie)">⭐ Ajouter aux Favoris</button>
                            }
                            else
                            {
                                <button disabled>✅ Déjà en Favoris</button>
                            }
                        }
                        else
                        {
                            <p><i>Connectez-vous pour ajouter aux favoris.</i></p>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div>
        <button @onclick="PreviousPage" disabled="@(!CanGoPrevious)">⬅ Précédent</button>
        <span>Page @currentPage</span>
        <button @onclick="NextPage" disabled="@(!CanGoNext)">Suivant ➡</button>
    </div>
}
else
{
    <p>Aucun film trouvé.</p>
}

<hr />

<!-- Section Favoris -->
<h3>⭐ Films Favoris</h3>

@if (currentUser is not null)
{
    @if (FavoriteMovies.Any())
    {
        <table>
            <thead>
            <tr>
                <th>Titre</th>
                <th>Année</th>
                <th>Action</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var favoriteMovie in FavoriteMovies)
            {
                <tr>
                    <td>@favoriteMovie</td>
                    
                    <td>
                        <button @onclick="() => RemoveFromFavorites(favoriteMovie)">❌ Supprimer</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>Vous n'avez aucun film en favori.</p>
    }
}
else
{
    <p><i>Connectez-vous pour voir vos favoris.</i></p>
}

@code {
    private string searchQuery = "Inception"; // Valeur par défaut
    private bool isLoading = false;
    private int currentPage = 1;
    private const int moviesPerPage = 10;
    private User? currentUser;

    public IEnumerable<Movie> MovieData { get; set; } = new List<Movie>();
    public List<string> FavoriteMovies { get; set; } = new List<string>();

    // Recherche de films
    private async Task SearchMovies()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            isLoading = true;
            MovieData = await GetMoviesService.SearchMoviesAsync(searchQuery, currentPage);
            isLoading = false;
        }
    }

    // Ajouter aux favoris
    private async Task AddToFavorites(Movie movie)
    {
        if (currentUser is not null && !FavoriteMovies.Contains(movie.Title)) // Évite les doublons
        {
            FavoriteMovies.Add(movie.Title);
            await FavoritesService.AddFavorites(movie.Title);
        }
    }

    // Supprimer des favoris
    private async Task RemoveFromFavorites(String movieTitle)
    {
        if (currentUser is not null)
        {
            FavoriteMovies.RemoveAll(m => m == movieTitle);
            await FavoritesService.RemoveFavorites(movieTitle);
        }
    }

    // Page précédente
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await SearchMovies();
        }
    }

    // Page suivante
    private async Task NextPage()
    {
        currentPage++;
        await SearchMovies();
    }

    // Vérification si l'on peut aller à la page précédente
    private bool CanGoPrevious => currentPage > 1;

    // Vérification si l'on peut aller à la page suivante
    private bool CanGoNext => MovieData.Count() == moviesPerPage;

    // Chargement initial
    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        FavoriteMovies = await FavoritesService.GetFavoritesAsync();
        await SearchMovies();
    }
    
    
}
