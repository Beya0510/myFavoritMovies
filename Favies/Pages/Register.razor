@page "/register"
@using Favies.Services
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<h3>Inscription</h3>

@if (isRegistered)
{
    <p class="alert alert-success">✅ Inscription réussie ! Vous pouvez maintenant vous connecter.</p>
    <button @onclick="GoToLogin" class="btn btn-primary">Aller à la connexion</button>
}
else
{
    <div class="auth-container">
        <h4>Créer un compte</h4>
        <EditForm Model="@this" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="email" class="form-control" />
                <ValidationMessage For="@(() => email)" />
            </div>

            <div class="form-group">
                <label>Mot de passe</label>
                <InputText @bind-Value="password" class="form-control" type="password" />
                <ValidationMessage For="@(() => password)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="error-message">@errorMessage</p>
            }

            <button type="submit" class="btn btn-success">S'inscrire</button>
        </EditForm>

        <p>Déjà un compte ? 
            <button @onclick="GoToLogin" class="btn btn-link">Connectez-vous ici</button>
        </p>
    </div>
}

@code {
    private string email = "";
    private string password = "";
    private string? errorMessage;
    private bool isRegistered = false;

    private async Task HandleRegister() // Renommé pour éviter le conflit
    {
        bool success = await AuthService.RegisterAsync(email, password);
        if (success)
        {
            isRegistered = true;
        }
        else
        {
            errorMessage = "Cet email est déjà utilisé.";
        }
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/authentication");
    }
}